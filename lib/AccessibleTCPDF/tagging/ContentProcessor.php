<?php
/**
 * ContentProcessor - Interface for PDF/UA content processing
 * 
 * Processors handle the complete lifecycle of content rendering with PDF/UA tagging:
 * 1. analyze()  - Determine what action to take (returns enum)
 * 2. execute()  - Execute the action (gets data from StateManager)
 * 
 * ============================================================================
 * FRAME ID vs NODE ID: Understanding Dynamic Frame Generation
 * ============================================================================
 * 
 * The SemanticTree is built BEFORE reflow, but frames can be created DURING 
 * reflow. This creates two scenarios where frameId doesn't match a tree node:
 * 
 * CASE 1: frameId === null
 * ------------------------
 * Meaning: Generated content WITH a Frame object
 * 
 * Examples:
 * - List bullets ("1.", "•", "a)", etc.) rendered by ListBullet renderer
 * - Image alt-text displayed when image fails to load
 * - Other synthetic content generated by renderers
 * 
 * Semantic Decision: ARTIFACT
 * - Not part of original DOM structure
 * - Should not appear in PDF Structure Tree
 * - Screen readers should ignore this content
 * 
 * Why: These are visual presentation elements, not document content.
 * 
 * 
 * CASE 2: frameId !== null BUT getNodeById(frameId) === null
 * -----------------------------------------------------------
 * Meaning: Generated content WITHOUT a Frame object
 * 
 * Examples:
 * - Text-splits (most common): Frame 7 → Frames 8,9,10,... when text wraps
 * - Inline-splits: Inline element split across lines
 * - Anonymous boxes: Auto-generated by CSS layout
 * - Page-break copies: Frame duplicated across pages
 * - (NOT CSS ::before/::after - those are created BEFORE reflow!)
 * 
 * Semantic Decision: CONTINUE (via parent lookup)
 * - Walk up parent chain until we find a node in the tree
 * - Use that parent's semantic context
 * - Continue rendering in the same BDC block
 * 
 * Why: Text-splits are just visual line-breaking, not semantic changes.
 *      The split frames are still part of the same DOM element (e.g., <p>).
 *      Screen readers should read all splits as one continuous text.
 * 
 * Example:
 *   <p>This is a very long text that wraps</p>
 *   
 *   SemanticTree (before reflow):
 *   - Frame 6: <p> ← IN TREE
 *   - Frame 7: #text "This is a very long text that wraps" ← IN TREE
 *   
 *   After reflow (text split across 3 lines):
 *   - Frame 6: <p> ← IN TREE
 *   - Frame 7: #text "This is a very " ← IN TREE (original)
 *   - Frame 8: #text "long text " ← NOT IN TREE (split #1)
 *   - Frame 9: #text "that wraps" ← NOT IN TREE (split #2)
 *   
 *   Correct tagging (CONTINUE):
 *   /P <BDC MCID=1>
 *     (This is a very ) Tj
 *     (long text ) Tj
 *     (that wraps) Tj
 *   EMC
 *   
 *   Wrong tagging (ARTIFACT):
 *   /P <BDC MCID=1>
 *     (This is a very ) Tj
 *   EMC
 *   /Artifact <BMC>
 *     (long text ) Tj
 *   EMC
 *   /Artifact <BMC>
 *     (that wraps) Tj
 *   EMC
 *   ← Screen reader only reads "This is a very "!
 * 
 * ============================================================================
 * 
 * @package dompdf-accessible
 * @link    https://github.com/dompdf/dompdf
 * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License
 */

use Dompdf\SemanticTree;

interface ContentProcessor
{
    /**
     * Main entry point - orchestrates analyze + execute
     * 
     * @param string|null $frameId Current frame ID being rendered
     * @param TaggingStateManager $stateManager State manager instance
     * @param SemanticTree $semanticTree Semantic tree for node lookup
     * @param callable $contentRenderer Callback that renders the actual content
     * @param callable|null $onBDCOpened Callback when semantic BDC is opened: fn(string $frameId, int $mcid, string $pdfTag, int $pageNumber): void
     * @return string PDF operators (BDC/EMC/Artifact + content)
     */
    public function process(
        ?string $frameId,
        TaggingStateManager $stateManager,
        SemanticTree $semanticTree,
        callable $contentRenderer,
        ?callable $onBDCOpened = null
    ): string;
}
