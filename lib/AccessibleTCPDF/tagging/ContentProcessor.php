<?php
/**
 * ContentProcessor - Interface for PDF/UA content processing
 * 
 * Processors handle the complete lifecycle of content rendering with PDF/UA tagging:
 * 1. analyze()  - Determine what action to take (returns enum)
 * 2. execute()  - Execute the action (gets data from StateManager)
 * 
 * ============================================================================
 * EDGECASES: Understanding Dynamic Frame Generation
 * ============================================================================
 * 
 * The SemanticTree is filled with the DOM nodes BEFORE reflow, but frames can be created DURING 
 * reflow. This creates two scenarios where frameId(FrameTree) doesn't match a tree node(SemanticTree):
 * 
 * CASE 1: frameId === null
 * ------------------------
 * Meaning: Dynamically generated Frame WITHOUT setting a frame context
 * 
 * Examples:
 * - List bullets ("1.", "â€¢", "a)", etc.) rendered by ListBullet renderer
 * - Image alt-text displayed when image fails to load
 * - Other synthetic content generated by renderers
 * 
 * Semantic Decision: ARTIFACT
 * - Not part of original DOM structure
 * - Should not appear in PDF Structure Tree
 * - Screen readers should ignore this content
 * 
 * Why: These are visual presentation elements, not document content.
 * 
 * CASE 2: frameId !== null BUT getNodeById(frameId) === null
 * -----------------------------------------------------------
 * Meaning: Dynamically generated content WITH a Frame object
 * 
 * Examples:
 * - Text split across multiple lines due to word wrapping (most common case)
 * - Inline element (<span>, <a>) split across line breaks
 * - Anonymous box wrapper created by CSS layout engine
 * - Table cell content split across page breaks
 * - Font substitution causing text to be split into multiple font-specific chunks
 * 
 * Semantic Decision: CONTINUE
 * - Frame was created DURING rendering of its parent
 * - Parent's BDC is still active (guaranteed by render flow timing)
 * - All split parts belong to same semantic element
 * ============================================================================
 * 
 * @package dompdf-accessible
 * @link    https://github.com/dompdf/dompdf
 * @license http://www.gnu.org/copyleft/lesser.html GNU Lesser General Public License
 */

use Dompdf\SemanticTree;

interface ContentProcessor
{
    /**
     * Main entry point - orchestrates analyze + execute
     * 
     * @param string|null $frameId Current frame ID being rendered
     * @param TaggingStateManager $stateManager State manager instance
     * @param SemanticTree $semanticTree Semantic tree for node lookup
     * @param callable $contentRenderer Callback that renders the actual content
     * @param callable|null $onBDCOpened Callback when semantic BDC is opened: fn(string $frameId, int $mcid, string $pdfTag, int $pageNumber): void
     * @return string PDF operators (BDC/EMC/Artifact + content)
     */
    public function process(
        ?string $frameId,
        TaggingStateManager $stateManager,
        SemanticTree $semanticTree,
        callable $contentRenderer,
        ?callable $onBDCOpened = null
    ): string;
}
